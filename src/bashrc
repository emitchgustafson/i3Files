# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

export PROMPT_COMMAND=__prompt_command

# old non git
#if [ "$color_prompt" = yes ]; then
#    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
#else
#    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
#fi
#unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

export RANGER_LOAD_DEFAULT_RC=FALSE


function __prompt_command() {
 local EXIT="$?"                         # This needs to be first
 PS1=""

 ### Colors to Vars ### {{{
 local RCol='\[\e[0m\]'	# Text Reset

 # Regular                    Bold                          Underline                     High Intensity                BoldHigh Intensity             Background                High Intensity Backgrounds
 local Bla='\[\e[0;30m\]';    local BBla='\[\e[1;30m\]';    local UBla='\[\e[4;30m\]';    local IBla='\[\e[0;90m\]';    local BIBla='\[\e[1;90m\]';    local On_Bla='\e[40m';    local On_IBla='\[\e[0;100m\]';
 local Red='\[\e[0;31m\]';    local BRed='\[\e[1;31m\]';    local URed='\[\e[4;31m\]';    local IRed='\[\e[0;91m\]';    local BIRed='\[\e[1;91m\]';    local On_Red='\e[41m';    local On_IRed='\[\e[0;101m\]';
 local Gre='\[\e[0;32m\]';    local BGre='\[\e[1;32m\]';    local UGre='\[\e[4;32m\]';    local IGre='\[\e[0;92m\]';    local BIGre='\[\e[1;92m\]';    local On_Gre='\e[42m';    local On_IGre='\[\e[0;102m\]';
 local Yel='\[\e[0;33m\]';    local BYel='\[\e[1;33m\]';    local UYel='\[\e[4;33m\]';    local IYel='\[\e[0;93m\]';    local BIYel='\[\e[1;93m\]';    local On_Yel='\e[43m';    local On_IYel='\[\e[0;103m\]';
 local Blu='\[\e[0;34m\]';    local BBlu='\[\e[1;34m\]';    local UBlu='\[\e[4;34m\]';    local IBlu='\[\e[0;94m\]';    local BIBlu='\[\e[1;94m\]';    local On_Blu='\e[44m';    local On_IBlu='\[\e[0;104m\]';
 local Pur='\[\e[0;35m\]';    local BPur='\[\e[1;35m\]';    local UPur='\[\e[4;35m\]';    local IPur='\[\e[0;95m\]';    local BIPur='\[\e[1;95m\]';    local On_Pur='\e[45m';    local On_IPur='\[\e[0;105m\]';
 local Cya='\[\e[0;36m\]';    local BCya='\[\e[1;36m\]';    local UCya='\[\e[4;36m\]';    local ICya='\[\e[0;96m\]';    local BICya='\[\e[1;96m\]';    local On_Cya='\e[46m';    local On_ICya='\[\e[0;106m\]';
 local Whi='\[\e[0;37m\]';    local BWhi='\[\e[1;37m\]';    local UWhi='\[\e[4;37m\]';    local IWhi='\[\e[0;97m\]';    local BIWhi='\[\e[1;97m\]';    local On_Whi='\e[47m';    local On_IWhi='\[\e[0;107m\]';
 local Gry='\[\e[0;90m\]';    local BGry='\[\e[1;90m\]';    local UGry='\[\e[4;90m\]';
 local MGr='\e[38;5;82m';
 local DCol=${Whi}
 local ACol=${Gry}
 ### End Color Vars ### }}}

 if [ $UID -eq "0" ];then
  PS1+="${Red}\u \h \W ->${RCol} "       ## Set prompt for root
 else
  PS1+="${ACol}"

  if [ $EXIT != 0 ]; then
   ## can add `kill -l $?` to test to filter backgrounded
   PS1+="(${Red}${EXIT}${ACol})"     ## Add exit code, if non 0
  else
   PS1+="(${MGr}ï€Œ ${ACol})"     ## Add exit code, if non 0

  fi


  PS1+="-(${DCol}\u${ACol})-(${DCol}\h${ACol})-(${DCol}\d \t${ACol})"    ## Current working dir

  # Check Jobs
  command jobs 2>/dev/null
  if [ $? == "0" ]; then
   #Backgrounded jobs
   local BKGJBS=$(jobs -r | wc -l | tr -d ' ')
   if [ ${BKGJBS} -gt 2 ]; then
    PS1+="-(${Red}bg:${BKGJBS}${ACol})"
   elif [ ${BKGJBS} -gt 0 ]; then
    PS1+="-(${Yel}bg:${BKGJBS}${ACol})"
   fi

   # Stopped Jobs
   local STPJBS=$(jobs -s | wc -l | tr -d ' ')
   if [ ${STPJBS} -gt 2 ]; then
    PS1+="-(${Red}stp:${STPJBS}${ACol})"
   elif [ ${STPJBS} -gt 0 ]; then
    PS1+="-(${Yel}stp:${STPJBS}${ACol})"
   fi
  fi
  #End Jobs
  #Git
  #Status
  if [[ $(command -v git) ]]; then
   local GStat="$(git status --porcelain -b 2>/dev/null | tr '\n' ':')"

   if [ "$GStat" ]; then
    PS1+="-("
    #Fetch Time Check
    local LAST=$(stat -c %Y $(git rev-parse --git-dir 2>/dev/null)/FETCH_HEAD 2>/dev/null)
    if [ "${LAST}" ]; then
     local TIME=$(echo $(date +"%s") - ${LAST} | bc)
     #Check if more than 60 minutes since last
     if [ "${TIME}" -gt "3600" ]; then
      git fetch 2>/dev/null
      PS1+=' +'
      #Refresh var
      local GStat="$(git status --porcelain -b 2>/dev/null | tr '\n' ':')"
     fi
    fi
    #End Fetch Time Check

    #Test For Changes
    #TODO:Change this to test for 'ahead' or 'behind'!
    local GChanges="$(echo ${GStat} | tr ':' '\n' | grep -v "^$" | grep -v "^\#\#" | wc -l | tr -d ' ')"
    if [ "$GChanges" == "0" ]; then
     local GitCol=$Gre
    else
     local GitCol=$Red
    fi
    #End Test For Changes

    #Branch
    local GBra="$(echo ${GStat} | tr ':' '\n' | grep "^##" | cut -c4- | grep -o "^[a-zA-Z]\{1,\}[^\.]")"
    if [ "$GBra" ]; then
     if [ "$GBra" == "master" ]; then
      local GBra="M"      ## Because why waste space
     fi
    else
     local GBra="ERROR"      #I Guess I'll do the right thing and error check
    fi
    #End Branch

    PS1+="${GitCol}[$GBra]${DCol}"	## Add result to prompt

    #Status
    ## Test Modified and Untracked for "0"
    # local GDel="$(echo ${GStat} | tr ':' '\n' | grep -c "^[ MARC]D")"

    #Ahead
    local GAhe="$(echo ${GStat} | tr ':' '\n' | grep "^##" | grep -o "ahead [0-9]\{1,\}" | grep -o "[0-9]\{1,\}")"
    if [ "$GAhe" ]; then
     PS1+="${Pur}${GAhe}A${DCol}"
    fi

    #Behind
    local GBeh="$(echo ${GStat} | tr ':' '\n' | grep "^##" | grep -o "behind [0-9]\{1,\}" | grep -o "[0-9]\{1,\}")"
    if [ "$GBeh" ]; then
     PS1+="${Pur}${GBeh}B${DCol}"
    fi

    #Modified
    local GMod="$(echo ${GStat} | tr ':' '\n' | grep -c "^[ MARC]M")"
    if [ "$GMod" -gt "0" ]; then
     PS1+="${Red}${GMod}M${DCol}"
    fi
    local GMod2="$(echo ${GStat} | tr ':' '\n' | grep -c "^[ MARC] ")"
    if [ "$GMod2" -gt "0" ]; then
     PS1+="${Gre}${GMod2}M${DCol}"
    fi

    #Untracked
    local GUnt="$(echo ${GStat} | tr ':' '\n' | grep -c "^\?")"
    if [ "$GUnt" -gt "0" ]; then
     PS1+="${Yel}${GUnt}U${DCol}"
    fi
    #End Commit Status
    PS1+="${ACol})"
   fi
  fi
 #End Git Status

 PS1+="${ACol}\n(${DCol}\w${ACol})-->${RCol}"          ## End of PS1
 fi
}
